#include<iostream>
#include<stack>
#include<queue>
using namespace std;
static int i = 0;
struct BinaryTreeNode
{
	int m_nValue;
	BinaryTreeNode *m_pLeft;
	BinaryTreeNode *m_pRight;
	BinaryTreeNode(int m_nValue) {
		this->m_nValue = m_nValue;
		m_pLeft = nullptr;
		m_pRight = nullptr;
		
	}

};
void FindAndPrintTherouteCore(BinaryTreeNode *pRoot, int SumLeft, queue<int>route);
void PrintTheRoute(queue<int>route);

void FindAndPrintTheroute(BinaryTreeNode*pRoot, int sum) {
	if (pRoot == nullptr || sum < 0) {
		cout<< "Invalid BinaryTree or Sum" << endl;
		return;
	}
	queue<int>route;
	FindAndPrintTherouteCore(pRoot, sum, route);

}
void FindAndPrintTherouteCore(BinaryTreeNode *pRoot, int SumLeft, queue<int>route) {
	if (pRoot == nullptr || SumLeft <= 0 || pRoot->m_nValue > SumLeft)
		return;
	route.push(pRoot->m_nValue);
	if (pRoot->m_pLeft == nullptr&&pRoot->m_pRight == nullptr) {
		if (pRoot->m_nValue = SumLeft) {
			PrintTheRoute(route);
			cout << endl;
		}
	}
	if (pRoot->m_pLeft != nullptr)
		FindAndPrintTherouteCore(pRoot->m_pLeft, SumLeft - pRoot->m_nValue, route);
	if (pRoot->m_pRight != nullptr) 
		FindAndPrintTherouteCore(pRoot->m_pRight, SumLeft - pRoot->m_nValue, route);

}

void PrintTheRoute(queue<int>route) {
	int nPrint;
	while (!route.empty()) {
		nPrint = route.front();
		cout << nPrint << " ";
		route.pop();
	}
}

int main() {
	BinaryTreeNode *pRoot = new BinaryTreeNode(8);
	pRoot->m_pLeft = new BinaryTreeNode(6);
	pRoot->m_pLeft->m_pLeft = new BinaryTreeNode(5);
	pRoot->m_pLeft->m_pRight = new BinaryTreeNode(7);
	pRoot->m_pRight = new BinaryTreeNode(10);
	pRoot->m_pRight->m_pLeft = new BinaryTreeNode(1);
	pRoot->m_pRight->m_pRight = new BinaryTreeNode(11);
	FindAndPrintTheroute(pRoot, 19);
	return 0;
}
