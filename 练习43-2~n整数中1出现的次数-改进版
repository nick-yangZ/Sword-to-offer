#include <cstdio>
#include <fstream>
#include<time.h>
#include<vector>
#include "BinaryTree.h"
using namespace std;
//找出n个数中，最小的k个数。

void TheTimesOfOneCore(const char *pstrN, int &nTotalOne, int nDigitalNumber);

int TheTimesOfOne(int n) {
	if (n < 1)
		return 0;
	char strN[50];
	sprintf_s(strN, "%d", n);
	
	char *pStr=strN;
	int nDigitalNumber = strlen(strN);
	int TotalOne=0;
	TheTimesOfOneCore(strN, TotalOne, nDigitalNumber);
	return TotalOne;
}

void TheTimesOfOneCore(const char *pstrN, int &nTotalOne,int nDigitalNumber ) {
	if (pstrN == nullptr || nDigitalNumber < 0)
		return;
	
	if (pstrN[0] == '1')
		nTotalOne += atoi(pstrN+1)+1 + (nDigitalNumber - 1)*(int)pow(10, nDigitalNumber - 2);
	else if (pstrN[0] > '1')
		nTotalOne = nTotalOne+(int)pow(10, nDigitalNumber-1)+(pstrN[0]-'0')*(nDigitalNumber-1)*(int)pow(10,nDigitalNumber-2);
	if (nDigitalNumber > 1) {
		TheTimesOfOneCore(pstrN + 1, nTotalOne, nDigitalNumber - 1);
	}
}
int main() {
	int m = 10000;
	int result = 0;
	result=TheTimesOfOne(m);

 	return 0;
}
