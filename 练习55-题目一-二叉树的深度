#include <cstdio>
#include <fstream>
#include<time.h>
#include<queue>
#include<stdlib.h>
#include<vector>
#include<string>
#include<iostream>
#include<map>
#include<stack>
#include"BinaryTree.h"
using namespace std;

//面试题55-二叉树的深度



int GetTheRootDeep(BinaryTreeNode* pRoot) {
	if (pRoot == nullptr)
		return 0;
	int nMostDeep = 0;
	
	if (pRoot->m_pLeft == nullptr&&pRoot->m_pRight == nullptr)
		return 1;
	if (pRoot->m_pLeft != nullptr)
		nMostDeep = GetTheRootDeep(pRoot->m_pLeft);
	if (pRoot->m_pRight != nullptr) {
		int nDeep = GetTheRootDeep(pRoot->m_pRight);
		nMostDeep = nMostDeep > nDeep ? nMostDeep : nDeep;
	}
	nMostDeep++;
	return nMostDeep;
}
int main() {
	BinaryTreeNode* pNode1 = CreateBinaryTreeNode(1);
	BinaryTreeNode* pNode2 = CreateBinaryTreeNode(2);
	BinaryTreeNode* pNode3 = CreateBinaryTreeNode(3);
	BinaryTreeNode* pNode4 = CreateBinaryTreeNode(4);
	BinaryTreeNode* pNode5 = CreateBinaryTreeNode(5);
	BinaryTreeNode* pNode6 = CreateBinaryTreeNode(6);
	BinaryTreeNode* pNode7 = CreateBinaryTreeNode(7);

	ConnectTreeNodes(pNode1, pNode2, pNode3);
	ConnectTreeNodes(pNode2, pNode4, pNode5);
	ConnectTreeNodes(pNode3, nullptr, pNode6);
	ConnectTreeNodes(pNode5, pNode7, nullptr);
	GetTheRootDeep(pNode1);

	return 0;
}
