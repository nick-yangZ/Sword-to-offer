#include<iostream>
#include<stack>
#include<queue>
using namespace std;

struct BinaryTreeNode {
	int m_nValue;
	BinaryTreeNode*m_pLeft;
	BinaryTreeNode*m_pRight;
	BinaryTreeNode(int m_nValue) {
		this->m_nValue = m_nValue;
		m_pLeft = nullptr;
		m_pRight = nullptr;
	}
};//这个分号很重要，切记！！！！！！！

void CreateDoubleDirectionListNodeCore(BinaryTreeNode* pFather, BinaryTreeNode*pNode, int nFatherValue, BinaryTreeNode*&pRootson);
void CompleteTheListNode(BinaryTreeNode*pNodeMini);
BinaryTreeNode * CreateDoubleDirectionListNode(BinaryTreeNode* pRoot) {
	if (pRoot == nullptr)
		return nullptr;
	BinaryTreeNode*pNodeMini = pRoot;
	BinaryTreeNode*pRootson = nullptr;
	while (pNodeMini->m_pLeft != nullptr)
		pNodeMini = pNodeMini->m_pLeft;
	CreateDoubleDirectionListNodeCore(pRoot, pRoot, 0, pRootson);
	CompleteTheListNode(pNodeMini);

	return pNodeMini;

}
void CreateDoubleDirectionListNodeCore(BinaryTreeNode* pFather, BinaryTreeNode*pNode, int nFatherValue, BinaryTreeNode*&pRootson) {
	
	BinaryTreeNode*pNodeLeftson;
	BinaryTreeNode*pNodeRightson;
	BinaryTreeNode*pNodeMini=pFather;
	BinaryTreeNode*pFindFatherSon = pNode;

	if (pFather!=pNode) {
		if (pNode->m_nValue < nFatherValue) { 
			while (pFindFatherSon->m_pRight != nullptr)
				pFindFatherSon = pFindFatherSon->m_pRight;
			pFindFatherSon->m_pRight = pFather;
		}
		else {
			while (pFindFatherSon->m_pLeft != nullptr)
				pFindFatherSon = pFindFatherSon->m_pLeft;
			
		}
		pRootson = pFindFatherSon;
	}
	if (pNode->m_pLeft == nullptr)
		return;

	if (pNode->m_pLeft != nullptr) {
		CreateDoubleDirectionListNodeCore(pNode, pNode->m_pLeft, pNode->m_nValue, pNodeLeftson);
	}
	if (pNode->m_pRight != nullptr) {
		CreateDoubleDirectionListNodeCore(pNode, pNode->m_pRight, pNode->m_nValue, pNodeRightson);
	}

	pNode->m_pLeft = pNodeLeftson;
	pNode->m_pRight = pNodeRightson;
	
	
}

void CompleteTheListNode(BinaryTreeNode*pNodeMini) {
	BinaryTreeNode*pNode=pNodeMini;
	
	while (pNode->m_pRight!= nullptr) {
		if (pNode->m_pRight->m_pLeft == nullptr) {
			pNode->m_pRight->m_pLeft = pNode;
		}
		pNode = pNode->m_pRight;
	}

}

int main() {
	BinaryTreeNode*pHead=nullptr;
	BinaryTreeNode*pRoot = new BinaryTreeNode(10);
	pRoot->m_pLeft = new BinaryTreeNode(6);
	pRoot->m_pRight = new BinaryTreeNode(14);
	pRoot->m_pLeft->m_pLeft = new BinaryTreeNode(4);
	pRoot->m_pLeft->m_pRight = new BinaryTreeNode(8);
	pRoot->m_pRight->m_pLeft = new BinaryTreeNode(12);
	pRoot->m_pRight->m_pRight = new BinaryTreeNode(16);


	pHead=CreateDoubleDirectionListNode(pRoot);

	return 0;

}

