#include<iostream>
#include<stack>
#include<queue>

using namespace std;

struct BinaryTreeNode {
	int m_nValue;
	BinaryTreeNode *m_pLeft;
	BinaryTreeNode *m_pRight;
	BinaryTreeNode(int m_nValue) {
		this->m_nValue = m_nValue;
		m_pLeft = nullptr;
		m_pRight = nullptr;
	}
};

void PrintBinaryTreeWithLevel(BinaryTreeNode *pRoot) {
	if (pRoot == nullptr)
		return;
	stack<BinaryTreeNode*> *StackNodePrint,*StackNodeMem,*StackTemp=nullptr;
	StackNodeMem = new stack<BinaryTreeNode*>;
	StackNodePrint = new stack<BinaryTreeNode*>;
	BinaryTreeNode *pNode = pRoot;
	StackNodePrint->push(pNode);
	//int Nextlevel = 0; 可以根据栈是否为空判断是否需要换行，少了两个变量。
	//int ToBePrinted = 1;
	bool LeftChildFirstIn = true;
	while (StackNodePrint->empty() != true) {
		pNode = StackNodePrint->top();
		StackNodePrint->pop();
		if (LeftChildFirstIn == true) {
			if (pNode->m_pLeft != nullptr) 
				StackNodeMem->push(pNode->m_pLeft);
			if (pNode->m_pRight != nullptr) 
				StackNodeMem->push(pNode->m_pRight);
		}
		else {
			if (pNode->m_pRight != nullptr) 
				StackNodeMem->push(pNode->m_pRight);
			if (pNode->m_pLeft != nullptr) 
				StackNodeMem->push(pNode->m_pLeft);
		}
		cout << pNode->m_nValue << " ";
		if (StackNodePrint->empty()) {
			cout << endl;
			LeftChildFirstIn = !LeftChildFirstIn;
			StackTemp = StackNodeMem;
			StackNodeMem = StackNodePrint;
			StackNodePrint = StackTemp;
		}
		
	}
}
int main() {
	BinaryTreeNode *pRoot = new BinaryTreeNode(1);
	pRoot->m_pLeft = new BinaryTreeNode(2);
	pRoot->m_pLeft->m_pLeft = new BinaryTreeNode(3);
	pRoot->m_pLeft->m_pRight = new BinaryTreeNode(7);
	pRoot->m_pRight = new BinaryTreeNode(10);
	pRoot->m_pRight->m_pLeft = new BinaryTreeNode(9);
	pRoot->m_pRight->m_pRight = new BinaryTreeNode(11);
	PrintBinaryTreeWithLevel(pRoot);
	return 0;
}

